data<-hw1_data.csv
data<-'hw1_data.csv'
#hola
x<-1
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(Prob)
mean(temp)
mean(temp$Prob)
mean(temp["Prob",])
temp["Prob",]*temp["X",]
mean( temp["Prob",]*temp["X",] )
sum(temp["Prob",]*temp["X",])
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?plot
plot(x,y)
plot(y,x)
plot(x,y)
x
x''
x
?transpose
x%*%x
2*y%*%x / x%*%x
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
w%*%x / sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
y%*%x / x%*%x
data(mtcars)
summary(mtcars)
y = mtcars$mpg
x <- mtcars$weight
y <- mtcars$mpg
x <- mtcars$wt
y%*%x / x%*%x
y%*%x / sum(y)
y%*%x / sum(x)
y%*%(x-mean(x)) / (x-mean(x))%*%(x-mean(x))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x-mean(x)
x
mean(x)
(x-mean(x))/std(x)
(x-mean(x))/var(x)
(x-mean(x))/sqrt(var(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
y%*%x / x%*%x
y%*%x / sum(x)
x
mean(x)
?fit
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
y%*%(x-mean(x)) / (x-mean(x))%*%(x-mean(x))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y%*%(x-mean(x)) / (x-mean(x))%*%(x-mean(x))
y%*%x / x%*%x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean(y)-mean(x)*(-1.713)
library(data.table)
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileUrl, destfile="mydata.zip", method="curl")
DT <- fread(unzip("mydata.zip"), na.strings="?")
DT <- DT[DT$Date == "1/2/2007" | DT$Date =="2/2/2007", ]
png("plot4.png", height=480, width=480)
par(mfrow=c(2, 2))
DT[, xtime:= as.POSIXct(strptime(paste(DT$Date, DT$Time), format="%d/%m/%Y %H:%M:%S"))]
DT$Global_active_power <- as.numeric(DT$Global_active_power)
plot(DT$xtime, DT$Global_active_power, xlab="", ylab="Global Active Power", pch=NA)
lines(DT$xtime, DT$Global_active_power)
plot(DT$xtime, DT$Voltage, xlab="datetime", ylab="Voltage", pch=NA)
lines(DT$xtime, DT$Voltage)
DT[, xtime:= as.POSIXct(strptime(paste(DT$Date, DT$Time), format="%d/%m/%Y %H:%M:%S"))]
DT$Sub_metering_1 <- as.numeric(DT$Sub_metering_1)
DT$Sub_metering_2 <- as.numeric(DT$Sub_metering_2)
DT$Sub_metering_3 <- as.numeric(DT$Sub_metering_3)
plot(DT$xtime, DT$Sub_metering_1, xlab="", ylab="Energy sub metering", pch=NA)
lines(DT$xtime, DT$Sub_metering_1, col="black")
lines(DT$xtime, DT$Sub_metering_2, col="red")
lines(DT$xtime, DT$Sub_metering_3, col="blue")
legend("topright", pch=NA, lty=c(1,1,1), bty="n", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(DT$xtime, DT$Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", pch=NA)
lines(DT$xtime, DT$Global_reactive_power)
dev.off()
library)data.table=
library)data.table)
library(data.table)
download.file(fileUrl, destfile="mydata.zip", method="curl")
DT <- fread(unzip("mydata.zip"), na.strings="?")
DT <- DT[DT$Date == "1/2/2007" | DT$Date =="2/2/2007", ]
png("plot4.png", height=480, width=480)
par(mfrow=c(2, 2))
DT[, xtime:= as.POSIXct(strptime(paste(DT$Date, DT$Time), format="%d/%m/%Y %H:%M:%S"))]
DT$Global_active_power <- as.numeric(DT$Global_active_power)
plot(DT$xtime, DT$Global_active_power, xlab="", ylab="Global Active Power", pch=NA)
lines(DT$xtime, DT$Global_active_power)
plot(DT$xtime, DT$Voltage, xlab="datetime", ylab="Voltage", pch=NA)
lines(DT$xtime, DT$Voltage)
DT[, xtime:= as.POSIXct(strptime(paste(DT$Date, DT$Time), format="%d/%m/%Y %H:%M:%S"))]
DT$Sub_metering_1 <- as.numeric(DT$Sub_metering_1)
DT$Sub_metering_2 <- as.numeric(DT$Sub_metering_2)
DT$Sub_metering_3 <- as.numeric(DT$Sub_metering_3)
plot(DT$xtime, DT$Sub_metering_1, xlab="", ylab="Energy sub metering", pch=NA)
lines(DT$xtime, DT$Sub_metering_1, col="black")
lines(DT$xtime, DT$Sub_metering_2, col="red")
lines(DT$xtime, DT$Sub_metering_3, col="blue")
legend("topright", pch=NA, lty=c(1,1,1), bty="n", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(DT$xtime, DT$Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", pch=NA)
lines(DT$xtime, DT$Global_reactive_power)
dev.off()
download.file(fileUrl, destfile="mydata.zip", method="curl")
DT <- fread(unzip("mydata.zip"), na.strings="?")
swirl()
library(swirl)
swirl()
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fits$residuals)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
View(galton)
varchild <- var(galton$chil)
varchild <- var(galton$child)
varChild <- var(galton$child)
var(ft$residuals)
varRes <- var(fit$residuals)
varEst <- est(ols.slope, ols.ic)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes, varEst)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit$residuals)
cov(efit$residuals, ettenu$mag)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?nlme
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
package(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?ggplot
?ggplot2
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
l<-lm(x~y)
summary(l)
coef(l)
predict(l)
?predict
f<-predict(l)
var((y-mean(y))%*%(x-mean(x))/(x-mean(x))%*%(x-mean(x)))
var(((y-mean(y))%*%(x-mean(x)))/((x-mean(x))%*%(x-mean(x)))
)
((y-mean(y))%*%(x-mean(x)))
(x-mean(x))%*%(x-mean(x))
((y-mean(y))%*%(x-mean(x)))/(x-mean(x))%*%(x-mean(x))
beta1 <- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2)/(n-2))
sigma <- sqrt(sum(e^2)/(length(y)-2))
ssx <- sum((x - mean(x))/(n-2))
n <- length(y)
ssx <- sum((x - mean(x))/(n-2))
ssx
seBeta0 <- (1/n+mean(x)^2 / ssx)^0.5 * sigma
seBeta0 <- (1/n+mean(x)^2 / ssx)^0.5 * sigma
seBeta0 <- (1/n+mean(x)^2 / ssx)
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1/n+mean(x)^2 / ssx)^0.5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0, df = n - 1, lower.tail = FALSE))
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept", "x")
coefTable
l$residuals
std(l$residuals)
sd(l$residuals)
library(mtcars)
?mtcars
mtcars
colnames(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
beta1 <- cor(y,x)*sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - (beta0 - beta1 * x)
e <- y - (beta0 + beta1 * x)
sigma <- sqrt(sum(e^2) / (n-2))
n <- length(y)
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
fit <- lm(y ~ x);
summary(fit)$coefficient
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
?norm
?prob
?qnorm
pnorm(70, mean = 80, sd = 1, lower.tail == TRUE)
pnorm(70, mean = 80, sd = 1, lower.tail = TRUE)
pnorm(70, mean = 80, sd = 10, lower.tail = TRUE)
pnorm(120, mean = 1100, sd = 75, lower.tail = TRUE)
pnorm(977, mean = 1100, sd = 75, lower.tail = FALSE)
pnorm(1223, mean = 1100, sd = 75, lower.tail = FALSE)
pnorm(1223, mean = 1100, sd = 75, lower.tail = FALSE)
pnorm(1175, mean = 1100, sd = 75, lower.tail = FALSE)
pnorm(1247, mean = 1100, sd = 75, lower.tail = FALSE)
pnorm(1247, mean = 1100, sd = 75/100, lower.tail = FALSE)
pnorm(1115, mean = 1100, sd = 75/100, lower.tail = FALSE)
pnorm(1115, mean = 1100, sd = 75/100, lower.tail = FALSE)
pnorm(1110, mean = 1100, sd = 75/100, lower.tail = FALSE)
pnorm(1110, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1112, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1115, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1088, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
75^2/100
pnorm(1088, mean = 1100, sd = 75^2/100, lower.tail = TRUE)
pnorm(1088, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1500, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1300, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1250, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1150, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1200, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1175, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1190, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1088, mean = 1100, sd = 75^2/100, lower.tail = FALSE)
pnorm(1088, mean = 1100, sd = 75/10, lower.tail = FALSE)
pnorm(1115, mean = 1100, sd = 75/10, lower.tail = FALSE)
pnorm(1115, mean = 1100, sd = 75/10, lower.tail = TRUE)
pnorm(1112, mean = 1100, sd = 75/10, lower.tail = TRUE)
pnorm(1110, mean = 1100, sd = 75/10, lower.tail = TRUE)
?poisson
?pois
.50^4+.5
2^5
1/32+5/32
?ppois
ppois(10, lambda = 5*3)
0.5 +1/12/sqrt(1000)
pnorm([14 16], mean = 15, sd = 10, lower.tail = TRUE)
pnorm(c(14,16), mean = 15, sd = 10, lower.tail = TRUE)
0.53-0.46
pnorm(c(14,16), mean = 15, sd = 10/10, lower.tail = TRUE)
0.841-0.158
setwd("C:/Users/YaelOswaldo/Repos/RepData_PeerAssessment1")
getwd()
read.csv("activity/activity.csv")
data <- read.csv("activity/activity.csv")
View(data)
class(data$interval)
class(data$date)
?read.csv
data <- read.csv("activity/activity.csv", header = TRUE, stringsAsFactors = FALSE)
class(data$date)
View(data)
data$date <- as.Date(data$date)
View(data)
class(dat$date)
class(data$date)
View(data)
class(data$steps)
sum(is.na(data$steps))
?hist
hist(data$steps)
hist(data$date)
hist(data$date, breaks = 3)
?hist
hist(data$steps)
?plot
plot(data$date, data$steps)
plot(data$date, data$steps, type = "h")
?aggr
?aggregate
aggregate(data$steps, by=data$date)
aggregate(steps ~ date, data = data)
aggregate(steps ~ date, data = data, mean)
aggregate(steps ~ date, data = data, sum)
tmp <- aggregate(steps ~ date, data = data, sum)
View(tmp)
hist(data$steps)
hist(tmp$steps)
plot(tmp$date, tmp$steps)
plot(tmp$date, tmp$steps, type + "bars")
plot(tmp$date, tmp$steps, type = "b")
?plot
plot(tmp$date, tmp$steps, type = "h")
plot(tmp$date, tmp$steps, type = "n")
plot(tmp$date, tmp$steps, type = "s")
plot(tmp$date, tmp$steps, type = "s", xlab = "Date", ylab = "steps", main = "Steps Frequency per Day")
plot(tmp$date, tmp$steps, type = "s", xlab = "Date", ylab = "steps", main = "Steps Frequency per Day", col = "blue")
?plot
plot(tmp$date, tmp$steps, type = "b", xlab = "Date", ylab = "steps", main = "Steps Frequency per Day", col = "blue")
plot(tmp$date, tmp$steps, type = "h", xlab = "Date", ylab = "steps", main = "Steps Frequency per Day", col = "blue")
plot(tmp$date, tmp$steps, type = "h", xlab = "Date", ylab = "steps", main = "Steps Frequency per Day", col = "blue", bg = "grey")
plot(tmp$date, tmp$steps, type = "h", xlab = "Date", ylab = "steps", main = "Steps Frequency per Day", col = "blue", bg = "gray")
plot(tmp$date, tmp$steps, type = "h", xlab = "Date", ylab = "steps", main = "Step Frequency per Day", col = "blue")
mean(tmp$steps)
median(tmp$steps)
abline(meanSteps, 0, untf = FALSE, \dots)
abline(h = 0, v = 0, col = "gray60")
abline(h = meanSteps, v = 0, col = "gray60")
stepsPerDate <- aggregate(steps ~ date, data = data, sum)
meanSteps <- mean(stepsPerDate$steps)
abline(meanSteps, 0, untf = FALSE, \dots)
> abline(h = meanSteps, v = 0, col = "gray60")
> abline(h = 0, v = meanSteps, col = "gray60")
abline(meanSteps)
?abline
abline(h=meanSteps)
abline(v=meanSteps)
abline(h=meanSteps)
plot(stepsPerDate$date, stepsPerDate$steps, type = "h", xlab = "Date", ylab = "steps", main = "Step Frequency per Day", col = "blue")
bline(meanSteps col = "red")
abline(h = meanSteps, col = "red")
print paste0("Mean # Steps Per Day: " , meanSteps)
print paste0("Median # of Steps Per Day: ", meanSteps)
paste0("Mean # Steps Per Day: " , meanSteps)
print c(paste0("Mean # Steps Per Day: " , meanSteps))
print(paste0("Mean # Steps Per Day: " , meanSteps))
?legend
legend("topright", legend = c("Mean Steps Per Day"),
title = "Line Types")
legend("topright", legend = c("Mean Steps Per Day"))
legend("topright", legend = c("Mean Steps Per Day"), col = c("red"))
legend("topright", lty = 1, col = color_vector, legend = c(Mean Steps Per Day"))
legend("topright", lty = 1, col = c("red"), legend = c(Mean Steps Per Day"))
legend("topright", lty = 1, col = c("red"), legend = c("Mean Steps Per Day"))
legend("topright", lty = 1, col = c("red"), legend = c("Mean Steps Per Day"))
View(stepsPerDate)
summary(stepsPerDate$steps)
